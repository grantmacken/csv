#!/usr/bin/env bash
source .env
SRC="content/${NAME}.xqm"
nsname=http://${NS_DOMAIN}/#${NAME}
importNS=$(grep -oP '^module namespace(.+);$' $SRC)
CALL=$1

IPAddress=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER)
URL="http://${IPAddress}:8080/exist/rest/db"

function post() {
curl  -s \
  -H 'Content-Type: application/xml' \
  -u 'admin:' \
  --data-binary @- "$URL"
}

public_repoURL='http://demo.exist-db.org/exist/apps/public-repo'
REPO="$URL/modules/find.xql"
cat <<EOF | post
<query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
<text><![CDATA[
xquery version '3.1';
declare namespace array = "http://www.w3.org/2005/xpath-functions/array";
declare namespace map = "http://www.w3.org/2005/xpath-functions/map";
declare namespace experr = "http://expath.org/ns/error";
declare variable \$pkgs :=
  $(< xar.pkgs );
declare variable \$nl := '&#10;';
declare variable \$hasInstalled := function( \$item ){
  if ( \$item  instance of element() ) then (
  ' ... result installed: [ ' || \$item/@result/string()  || ' ]&#10;' || 
  'in db location target: [ ' || \$item/@target/string()  || ' ]'
  )
  else(error(xs:QName("ERROR"), " - failed to install"))
};
try {
(
' - found ' || array:size(\$pkgs) || ' to install ',\$nl,
for \$pkg in \$pkgs?*
  let \$pkgName := \$pkg?1
  let \$version := \$pkg?2
  let \$download := \$pkg?3
  return(
  'Installing xar archive package ... ',\$nl,
  ( 'name: ' || \$pkgName, 'version: ' || \$version, 'download: ' || \$download) => string-join(\$nl),
 \$nl,
  repo:install-and-deploy(\$pkgName, \$version ,\$download ) => \$hasInstalled(), \$nl,
\$nl)
)} 
catch experr:EXPATH00 {
      'Error: unknown other error thrown from expath library &#10;' ||
      'check download link'
}
catch * {
      'Error:' || \$err:code || ': '  || \$err:description || '&#10;'
}
]]></text>
</query>
EOF

# repo:list() => string-join(\$nl),



